// Find middle of LinkedList
class Solution {
    // Bruteforce solution
    public ListNode middleNode(ListNode head) {
        ListNode temp = head;
        int size = 0;
        while (temp != null) {
            size++;
            temp = temp.next;
        }
        int mid = (size % 2 == 1) ? (size / 2) : (size / 2) + 1;

        ListNode temp2 = head;
        for (int i = 0; i < mid; i++) {
            temp2 = temp2.next;
        }
        return temp2;
    }
    // Time complexity: O(n+(n/2))
    // space complexity: O(1)

    // Optimised solution
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    // Time complexity: O(n/2)
    // Space complexity: O(1)
}
